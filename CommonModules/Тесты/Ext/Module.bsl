
Функция ТестированиеНапечатать2(Шапка, Вопросы, Ответы, Оптимизировано=Ложь) Экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ТестированиеРезультат");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для Каждого тВопрос Из Вопросы Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Вопрос6");
		ОбластьМакета.Параметры.Заполнить(тВопрос);
		НомерВарианта = 0;
		Для Каждого тОтвет Из Ответы Цикл
			Если тОтвет.Вопрос = тВопрос.Вопрос Тогда
				НомерВарианта = НомерВарианта + 1;
				ОбластьМакета.Параметры["Ответ" + Строка(НомерВарианта)] = тОтвет.Ответ;
				Если тОтвет.Ответ = тВопрос.Ответ Тогда
					ОбластьМакета.Параметры["Выбор" + Строка(НомерВарианта)] = "Х";
				КонецЕсли;
			ИначеЕсли НомерВарианта > 0 И Оптимизировано Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	Возврат ТабДокумент;
КонецФункции

Функция ТестированиеНапечатать(Знач Ссылка) Экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Тестирование.Номер КАК Номер,
	                      |	Тестирование.Дата КАК Дата,
	                      |	Тестирование.Учащийся КАК Учащийся,
	                      |	Тестирование.Тест КАК Тест,
	                      |	Тестирование.Оценка КАК Оценка,
	                      |	Тестирование.ЗатраченоВремени КАК ЗатраченоВремени,
	                      |	Тестирование.Комментарий КАК Комментарий
	                      |ИЗ
	                      |	Документ.Тестирование КАК Тестирование
	                      |ГДЕ
	                      |	Тестирование.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Шапка = Запрос.Выполнить().Выгрузить();
	Если Шапка.Количество() > 0 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТестированиеВопросы.НомерСтроки КАК НомерСтроки,
		               |	ТестированиеВопросы.Вопрос КАК Вопрос,
		               |	ТестированиеВопросы.Ответ КАК Ответ
		               |ИЗ
		               |	Документ.Тестирование.Вопросы КАК ТестированиеВопросы
		               |ГДЕ
		               |	ТестированиеВопросы.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки";
		Вопросы = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Ответы.НомерСтроки КАК НомерСтроки2,
		               |	Ответы.Ответ КАК Ответ,
		               |	Вопросы.НомерСтроки КАК НомерСтроки1,
		               |	Ответы.Вопрос КАК Вопрос
		               |ИЗ
		               |	Документ.Тестирование.Ответы КАК Ответы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Тестирование.Вопросы КАК Вопросы
		               |		ПО Ответы.Ссылка = Вопросы.Ссылка
		               |			И Ответы.Вопрос = Вопросы.Вопрос
		               |ГДЕ
		               |	Ответы.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки1,
		               |	НомерСтроки2";
		Ответы = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = ТестированиеНапечатать2(Шапка[0], Вопросы, Ответы, Истина);
	КонецЕсли;
	Возврат ТабДокумент;
КонецФункции

Процедура ВопросыОтветыПолучить(Знач Тест, Вопросы, Ответы) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Вопросы.Ссылка КАК Вопрос,
	                      |	Вопросы.Код КАК Код,
	                      |	Вопросы.Наименование КАК Наименование,
	                      |	Вопросы.Владелец.ПеремешиватьВопросы КАК ПеремешиватьВопросы
	                      |ИЗ
	                      |	Справочник.Вопросы КАК Вопросы
	                      |ГДЕ
	                      |	Вопросы.Владелец = &Тест
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Код");
	Запрос.УстановитьПараметр("Тест",	Тест);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		Рандом	= Новый ГенераторСлучайныхЧисел;
		Если ТЗ[0].ПеремешиватьВопросы Тогда
			Для Каждого тСтрока Из ТЗ Цикл
				тСтрока.Код = Рандом.СлучайноеЧисло(0, 9999);
			КонецЦикла;
			ТЗ.Сортировать("Код");
		КонецЕсли;
		Вопросы.Загрузить(ТЗ);
		
		Запрос.УстановитьПараметр("Вопросы",	Вопросы.Выгрузить().ВыгрузитьКолонку("Вопрос"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВариантыОтветов.Ссылка КАК Ответ,
		               |	ВариантыОтветов.Код КАК Код,
		               |	ВариантыОтветов.Наименование КАК Наименование,
		               |	ВариантыОтветов.Вес КАК Вес,
		               |	Вопросы.Ссылка КАК Вопрос,
		               |	9999 КАК Порядок
		               |ИЗ
		               |	Справочник.ВариантыОтветов КАК ВариантыОтветов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Вопросы КАК Вопросы
		               |		ПО ВариантыОтветов.Владелец = Вопросы.Ссылка
		               |ГДЕ
		               |	Вопросы.Владелец = &Тест
		               |	И ВариантыОтветов.Владелец В(&Вопросы)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Вес УБЫВ";
		ТЗ = Запрос.Выполнить().Выгрузить();
		Для Каждого тСтрока Из ТЗ Цикл
			тСтрока.Порядок = Рандом.СлучайноеЧисло(0, 9999);
		КонецЦикла;
		ТЗ.Сортировать("Порядок");
		Ответы.Загрузить(ТЗ);
	КонецЕсли;
КонецПроцедуры

Функция ПолучениеНовогоКода(Знач Владелец) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Вопросы.Код + 1 КАК Код
	                      |ИЗ
	                      |	Справочник.Вопросы КАК Вопросы
	                      |ГДЕ
	                      |	Вопросы.Владелец = &Владелец
	                      |	И НЕ Вопросы.Код + 1 В
	                      |				(ВЫБРАТЬ
	                      |					Вопросы.Код
	                      |				ИЗ
	                      |					Справочник.Вопросы КАК Вопросы
	                      |				ГДЕ
	                      |					Вопросы.Владелец = &Владелец)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Код");
	Запрос.УстановитьПараметр("Владелец",	Владелец);
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Вопросы") Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ВариантыОтветов.Код + 1 КАК Код
		               |ИЗ
		               |	Справочник.ВариантыОтветов КАК ВариантыОтветов
		               |ГДЕ
		               |	ВариантыОтветов.Владелец = &Владелец
		               |	И НЕ ВариантыОтветов.Код + 1 В
		               |				(ВЫБРАТЬ
		               |					ВариантыОтветов.Код
		               |				ИЗ
		               |					Справочник.ВариантыОтветов КАК ВариантыОтветов
		               |				ГДЕ
		               |					ВариантыОтветов.Владелец = &Владелец)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Код";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Код, 1);
КонецФункции

Функция ВопросИспользован(Знач Вопрос) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(ПриТестировании.Период) КАК Период
	                      |ИЗ
	                      |	РегистрНакопления.ОтветыПриТестировании КАК ПриТестировании
	                      |ГДЕ
	                      |	ПриТестировании.Вопрос = &Вопрос");
	Запрос.УстановитьПараметр("Вопрос",	Вопрос);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат (Выборка.Следующий() И Год(Выборка.Период) > 0);
КонецФункции

Функция ОценкаИспользован(Ссылка) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ОтветыПриТестировании.Период КАК Период
	                      |ИЗ
	                      |	РегистрНакопления.ОтветыПриТестировании КАК ОтветыПриТестировании
	                      |ГДЕ
	                      |	ОтветыПриТестировании.Оценка = &Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Период УБЫВ");
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Год(Выборка.Период) > 0, Ложь);
КонецФункции

Процедура ВопросУдалить(Ссылка, Отказ=Ложь) Экспорт
	Попытка
		Ссылка.ПолучитьОбъект().Удалить();
	Исключение
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

Функция ВопросыКоличество(Знач Тест, Справочник="Вопросы") Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(1) КАК Количество
	                      |ИЗ
	                      |	Справочник.Вопросы КАК Справочник
	                      |ГДЕ
	                      |	Справочник.Владелец = &Тест");
	Запрос.УстановитьПараметр("Тест",	Тест);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Вопросы", Справочник);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0);
КонецФункции

Функция ВопросыПоТесту(Знач Тест) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Вопросы.Код КАК Код,
	                      |	Вопросы.Ссылка КАК Ссылка,
	                      |	Вопросы.Наименование КАК Наименование,
	                      |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВариантыОтветов.Ссылка), 0) КАК КоличествоВариантыОтветов
	                      |ИЗ
	                      |	Справочник.Вопросы КАК Вопросы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтветов КАК ВариантыОтветов
	                      |		ПО Вопросы.Ссылка = ВариантыОтветов.Владелец
	                      |ГДЕ
	                      |	Вопросы.Владелец = &Тест
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Вопросы.Ссылка,
	                      |	Вопросы.Код,
	                      |	Вопросы.Наименование
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Код");
	Запрос.УстановитьПараметр("Тест",	Тест);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ОтветИспользован(Знач Ссылка) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(ОтветыПриТестировании.Период) КАК Период
	                      |ИЗ
	                      |	РегистрНакопления.ОтветыПриТестировании КАК ОтветыПриТестировании
	                      |ГДЕ
	                      |	ОтветыПриТестировании.Ответ = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат (Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Период));
КонецФункции

Функция ОтветыПоВопросу(Знач Вопрос, Ответы=Неопределено) Экспорт
	Если Ответы = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Ответы.Ссылка КАК Ответ,
		                      |	Ответы.Код КАК Код,
		                      |	Ответы.Наименование КАК Наименование,
		                      |	Ответы.Вес КАК Вес,
		                      |	ВЫБОР
		                      |		КОГДА ПриТестировании.Активность ЕСТЬ NULL
		                      |			ТОГДА ЛОЖЬ
		                      |		ИНАЧЕ ИСТИНА
		                      |	КОНЕЦ КАК ОтветИспользован
		                      |ИЗ
		                      |	Справочник.ВариантыОтветов КАК Ответы
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтветыПриТестировании КАК ПриТестировании
		                      |		ПО Ответы.Ссылка = ПриТестировании.Ответ
		                      |ГДЕ
		                      |	Ответы.Владелец = &Вопрос
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Код");
		Запрос.УстановитьПараметр("Вопрос",	Вопрос);
		ТЗ = Запрос.Выполнить().Выгрузить();
	Иначе
		ТЗ = Ответы.Выгрузить(Ответы.НайтиСтроки(Новый Структура("Вопрос", Вопрос)));
	КонецЕсли;
	Возврат ТЗ;
КонецФункции

Функция ВесыПоВопросу(Знач Вопрос) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВариантыОтветов.Вес КАК Вес
	                      |ИЗ
	                      |	Справочник.ВариантыОтветов КАК ВариантыОтветов
	                      |ГДЕ
	                      |	ВариантыОтветов.Владелец = &Вопрос
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВариантыОтветов.Вес
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Вес");
	Запрос.УстановитьПараметр("Вопрос",	Вопрос);
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ТестДоступен(Знач Ссылка) Экспорт
	Возврат (ЗначениеЗаполнено(Ссылка) И НЕ Ссылка.ПометкаУдаления И НЕ Ссылка.ЭтоГруппа);
КонецФункции

Функция ВопросыЗаполнить(Знач Тест, Знач Документ=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Вопросы.Ссылка КАК Вопрос,
	                      |	Вопросы.Код КАК Код,
	                      |	Вопросы.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Вопросы КАК Вопросы
	                      |ГДЕ
	                      |	Вопросы.Владелец = &Тест
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Код");
	Запрос.УстановитьПараметр("Тест",	Тест);
	Если ЗначениеЗаполнено(Документ) Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	Вопросы.Ссылка КАК Вопрос,
		               |	Вопросы.Код КАК Код,
		               |	Вопросы.Наименование КАК Наименование
		               |ИЗ
		               |	Документ.Тестирование.Вопросы КАК ТестированиеВопросы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Вопросы КАК Вопросы
		               |		ПО ТестированиеВопросы.Вопрос = Вопросы.Ссылка
		               |ГДЕ
		               |	Вопросы.Владелец = &Тест
		               |	И ТестированиеВопросы.Ссылка = &Ссылка
		               |	И ТестированиеВопросы.Вопрос ЕСТЬ NULL
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Код";
		Запрос.УстановитьПараметр("Ссылка",	Документ);
	КонецЕсли;
	ТЗ = Запрос.Выполнить().Выгрузить();
	//Если ЗначениеЗаполнено(Документ) Тогда
	//КонецЕсли;
	Возврат ТЗ;
КонецФункции

Функция ОценкиПолучить(Знач Тест) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТестыОценки.Ссылка КАК Ссылка,
	                      |	ТестыОценки.Результат КАК Результат
	                      |ИЗ
	                      |	Справочник.Оценки КАК ТестыОценки
	                      |ГДЕ
	                      |	ТестыОценки.Владелец = &Тест");
	Запрос.УстановитьПараметр("Тест",		Тест);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция Оценить(Знач Тест, Знач Результат) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТестыОценки.Результат КАК Результат,
	                      |	ТестыОценки.Ссылка
	                      |ИЗ
	                      |	Справочник.Оценки КАК ТестыОценки
	                      |ГДЕ
	                      |	ТестыОценки.Владелец = &Тест
	                      |	И ТестыОценки.Результат <= &Результат
	                      |	И ТестыОценки.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Результат УБЫВ");
	Запрос.УстановитьПараметр("Тест",		Тест);
	Запрос.УстановитьПараметр("Результат",	Результат);
	Курсор = Запрос.Выполнить();
	Если Курсор.Пустой() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТестыОценки.Результат КАК Результат,
		               |	ТестыОценки.Ссылка
		               |ИЗ
		               |	Справочник.Оценки КАК ТестыОценки
		               |ГДЕ
		               |	ТестыОценки.Владелец = &Тест
		               |	И ТестыОценки.ПометкаУдаления = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Результат";
		Курсор = Запрос.Выполнить();
		//Если Курсор.Пустой() Тогда
		//	Запрос.Текст = "ВЫБРАТЬ
		//	               |	ТестыОценки.Результат КАК Результат,
		//	               |	ТестыОценки.Ссылка
		//	               |ИЗ
		//	               |	Справочник.Оценки КАК ТестыОценки
		//	               |ГДЕ
		//	               |	ТестыОценки.Владелец = &Тест
		//	               |
		//	               |УПОРЯДОЧИТЬ ПО
		//	               |	Результат";
		//	Курсор = Запрос.Выполнить();
		//КонецЕсли;
	КонецЕсли;
	Выборка = Курсор.Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.Оценки.ПустаяСсылка());
КонецФункции

Функция ИнтервалПолучить(ПродолжительностьТестирования=3600) Экспорт
	Возврат ?(ПродолжительностьТестирования > 600, 60, 30);
КонецФункции

Функция ПродолжительностьТестирования(Тест) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Тесты.ПродолжительностьТестирования КАК ПродолжительностьТестирования
	                      |ИЗ
	                      |	Справочник.Тесты КАК Тесты
	                      |ГДЕ
	                      |	Тесты.Ссылка = &Тест");
	Запрос.УстановитьПараметр("Тест",	Тест);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ПродолжительностьТестирования * 60, 0);
КонецФункции

Функция ТестыДоступныеПолучить(Учащийся=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Тесты.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Тесты КАК Тесты
	                      |ГДЕ
	                      |	Тесты.ПометкаУдаления = ЛОЖЬ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка");
	//Если НЕ Юзеры.УчетнаяЗаписьГостевая() Тогда
	//	Запрос.УстановитьПараметр("Пользователь",	Юзеры.ТекущийПользователь());
	//КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
КонецФункции

Функция ТестПоследнийНайти(ФизЛицо=Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Результаты.Тест КАК Тест,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Результаты.Регистратор) КАК Количество
	                      |ИЗ
	                      |	РегистрСведений.РезультатыТестирования.СрезПоследних КАК Результаты
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Результаты.Тест
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Количество УБЫВ");
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	Результаты.Тест КАК Тест
		               |ИЗ
		               |	РегистрСведений.РезультатыТестирования.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК Результаты";
		Запрос.УстановитьПараметр("ФизЛицо",	ФизЛицо);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Тест, Справочники.Тесты.ПустаяСсылка());
КонецФункции
